parameters:
  - name: environment
    type: string
    displayName: "The name of the environment (ex. dev, prod )"

  - name: layers
    type: object
    displayName: "A layer object"

  - name: getImageLayers
    type: string
    default: ""
    displayName: "Retrieve an Image ID"

  - name: pipelineId
    type: string
    default: ""
    displayName: "The Azure DevOps Pipeline ID"

  - name: runId
    type: string
    default: ""
    displayName: "The build from which to download the artifacts"

  - name: preferTriggeringPipeline
    type: string
    default: ""
    displayName: "A boolean specifying whether to download artifacts from a triggering build."

  - name: downloadPath
    type: string
    default: ""
    displayName: "Directory to download the artifact files. Can be relative to the pipeline workspace directory or absolute. If multi-download option is applied (by leaving an empty artifact name), a sub-directory will be created for each."

  - name: targetFolder
    type: string
    default: ""
    displayName: "Target folder or UNC path files will copy to"

  - name: projectName
    type: string
    default: ""
    displayName: "The name of the Azure DevOps project"

  - name: runBranch
    type: string
    default: ""
    displayName: "Specify to filter on branch/ref name"

  - name: runVersion
    type: string
    default: ""
    displayName: "Specifies which build version to download. Options: latest, latestFromBranch, specific"

# Since all stages are generated and set a dependency, a start stage exists with no dependencies so that the first dynamic stage can
# depend on this.  "You must have at least one stage without dependencies"

stages:
  # Create a stage for each layer's apply process.  Set dependsOn for all dependencies listed  in each nested object in parameters.layers.
  # This first dependency loop constructs the pipeline map and does not take Terraform into consideration

  - ${{ each layer in parameters.layers }}:
      - stage: ${{ layer.name }}_${{ parameters.environment}}_plan
        displayName: ${{ layer.name }} - ${{ parameters.environment }} - Plan
        dependsOn:
          - ${{ each dependency in layer.dependencies }}:
              - ${{ dependency.value }}_${{ parameters.environment}}_apply
        variables:
          - template: ./Variables.${{ parameters.environment }}.yaml

        # Download the universal package for the layer and the version

        jobs:
          - job: ${{ layer.name }}
            steps:
              - bash: echo This exists to have a non-dynamic job in the stage without dependencies

          - ${{ if contains( layer.skip, false) }}:
              - job:
                displayName: ${{ layer.name }} Plan
                steps:
                  - task: UniversalPackages@0
                    displayName: ${{ layer.type }} artifact
                    inputs:
                      command: "download"
                      downloadDirectory: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}"
                      feedsToUse: "external"
                      externalFeedCredentials: $(artifactFeedCredentials)
                      feedDownloadExternal: $(artifactFeed)
                      packageDownloadExternal: layer-${{ layer.type }}
                      versionDownloadExternal: ${{ layer.version }}

                  # Loop through each dependency again to be used for dynamically creating a dependency map in Terraform

                  - ${{ each dependency in layer.dependencies }}:
                      - task: Bash@3
                        displayName: ${{ layer.name }} parameters
                        inputs:
                          targetType: inline
                          script: |
                            echo ${{ layer.name }} ${{ dependency.key }} ${{ dependency.value }} >> yamldependencies.txt
                            cat yamldependencies.txt

                  # Create a container for Terraform state.  terraformsetup.sh is packaged with the layer build process, but exists in Stratum/scripts.sh

                  - task: AzureCLI@2
                    displayName: State Setup ${{ layer.name }}
                    inputs:
                      azureSubscription: ${{ variables.serviceConnectionApp }}
                      addSpnToEnvironment: true
                      scriptType: bash
                      scriptLocation: scriptPath
                      scriptPath: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}/${{ layer.provider }}setup.sh"
                      arguments: ${{ layer.name }} ${{ parameters.environment }} $(backendResourceGroupName) $(backendStorageAccountName) $(backendContainerName) $(Build.Repository.Name) $(basedOnStratumKitName) ${{ layer.type }} ${{ layer.destroy }} $(kitPath) ${{ layer.provider }} ${{ layer.inputFile }}

                  # Generate Terraform data.terraform_remote_state.* dependencies.  layers.sh is packaged with the layer build process, but exists in Stratum/scripts.sh

                  - task: AzureCLI@2
                    displayName: Preparing ${{ layer.name }}
                    inputs:
                      azureSubscription: ${{ variables.serviceConnectionApp }}
                      addSpnToEnvironment: true
                      scriptType: bash
                      scriptLocation: scriptPath
                      scriptPath: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}/layers.sh"
                      arguments: ${{ layer.name }} ${{ parameters.environment }} $(backendResourceGroupName) $(backendStorageAccountName) $(backendContainerName) $(Build.Repository.Name) $(basedOnStratumKitName) ${{ layer.type }} ${{ layer.destroy }} $(kitPath) ${{ layer.provider }} ${{ layer.inputFile }}

                  # Conditional Image Builder connection if IB is enabled

#                  - ${{ if contains( parameters.getImageLayers, layer.name) }}:
#                      - template: ./GetImage.yaml
#                        parameters:
#                          projectName: ${{ parameters.projectName }}
#                          runVersion: ${{ parameters.runVersion }}
#                          runBranch: ${{ parameters.runBranch }}
#                          pipelineId: ${{ parameters.pipelineId }}
#                          runId: ${{ parameters.runId }}
#                          preferTriggeringPipeline: ${{ parameters.preferTriggeringPipeline }}
#                          downloadPath: ${{ parameters.downloadPath }}
#                          layerType: ${{ layer.type }}

#                  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
#                    displayName: "Replace tokens in **/*.tfvars, **/*.tf"
#                    inputs:
#                      rootDirectory: "$(System.DefaultWorkingDirectory)/kits/jumpstart-all"
#                      targetFiles: "**/*.tfvars, **/*.tf"
#                      tokenPrefix: "[__"
#                      tokenSuffix: "__]"

                  # Terraform plan. terraformplan.sh is packaged with the layer build process, but exists in Stratum/scripts.sh

                  - task: AzureCLI@2
                    displayName: Planning ${{ layer.name }}
                    inputs:
                      azureSubscription: ${{ variables.serviceConnectionApp }}
                      addSpnToEnvironment: true
                      scriptType: bash
                      scriptLocation: scriptPath
                      scriptPath: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}/${{ layer.provider }}plan.sh"
                      arguments: ${{ layer.name }} ${{ parameters.environment }} $(backendResourceGroupName) $(backendStorageAccountName) $(backendContainerName) $(Build.Repository.Name) $(basedOnStratumKitName) ${{ layer.type }} ${{ layer.destroy }} $(kitPath) ${{ layer.provider }} ${{ layer.inputFile }}

                  # Terraform plan detects if changes are to be applied and passes the result to the apply stage through a pipeline artifact

                  - task: PublishPipelineArtifact@1
                    inputs:
                      path: "$(Build.ArtifactStagingDirectory)/skip.txt"
                      artifactName: ${{ layer.name }}

      # Create a stage for each layer's apply process

      - stage: ${{ layer.name }}_${{ parameters.environment}}_apply
        displayName: ${{ layer.name }} - ${{ parameters.environment }} - Apply
        dependsOn: ${{ layer.name }}_${{ parameters.environment}}_plan
        variables:
          - template: ./Variables.${{ parameters.environment }}.yaml
        jobs:
          - job: ${{ layer.name }}
            steps:
              - bash: echo This exists to have a non-dynamic job in the stage without dependencies

          # Download previous stage's artifact and determine if Terraform apply should be skipped

          - ${{ if contains( layer.skip, false) }}:
              - job: check_skip_file
                steps:
                  - task: DownloadPipelineArtifact@2
                    displayName: "Download Pipeline Artifact"
                    condition: succeeded()
                    inputs:
                      buildType: "current"
                      artifactName: "${{ layer.name }}"
                      targetPath: "$(System.ArtifactsDirectory)"

                  - script: |
                      skipApply=$(cat '$(System.ArtifactsDirectory)/skip.txt')
                      echo "##vso[task.setvariable variable=skipApply;isOutput=true]$skipApply"
                      echo $skipApply
                    displayName: "Apply skip check"
                    name: skipresult

          # Terraform Apply is a deployment job to enable use of environments.  The condition is the result True/False from the TF plan's artifact
          # If Terraform plan did not detect changes, this iteration stops.

          - ${{ if contains( layer.skip, false) }}:
              - deployment:
                displayName: ${{ layer.name }} Apply
                environment: ${{ parameters.environment }}
                dependsOn: check_skip_file
                condition: or(eq(dependencies.check_skip_file.outputs['skipresult.skipApply'], 'False'), eq('${{ layer.forcerun }}', true))
                workspace:
                  clean: all
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self

                        # Download the universal package for the layer and the version

                        - task: UniversalPackages@0
                          displayName: ${{ layer.type }} artifact
                          inputs:
                            command: "download"
                            downloadDirectory: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}"
                            feedsToUse: "external"
                            externalFeedCredentials: $(artifactFeedCredentials)
                            feedDownloadExternal: $(artifactFeed)
                            packageDownloadExternal: layer-${{ layer.type }}
                            versionDownloadExternal: ${{ layer.version }}

                        # Loop through each dependency again to be used for dynamically creating a dependency map in Terraform

                        - ${{ each dependency in layer.dependencies }}:
                            - task: Bash@3
                              displayName: ${{ layer.name }} parameters
                              inputs:
                                targetType: inline
                                script: |
                                  echo ${{ layer.name }} ${{ dependency.key }} ${{ dependency.value }} >> yamldependencies.txt
                                  cat yamldependencies.txt

                        # Generate Terraform data.terraform_remote_state.* dependencies.  layers.sh is packaged with the layer build process, but exists in Stratum/scripts.sh

                        - task: AzureCLI@2
                          displayName: Preparing ${{ layer.name }}
                          inputs:
                            azureSubscription: ${{ variables.serviceConnectionApp }}
                            addSpnToEnvironment: true
                            scriptType: bash
                            scriptLocation: scriptPath
                            scriptPath: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}/layers.sh"
                            arguments: ${{ layer.name }} ${{ parameters.environment }} $(backendResourceGroupName) $(backendStorageAccountName) $(backendContainerName) $(Build.Repository.Name) $(basedOnStratumKitName) ${{ layer.type }} ${{ layer.destroy }} $(kitPath) ${{ layer.provider }} ${{ layer.inputFile }}

#                        - ${{ if contains( parameters.getImageLayers, layer.name) }}:
#                            - template: ./GetImage.yaml
#                              parameters:
#                                projectName: ${{ parameters.projectName }}
#                                runVersion: ${{ parameters.runVersion }}
#                                runBranch: ${{ parameters.runBranch }}
#                                pipelineId: ${{ parameters.pipelineId }}
#                                runId: ${{ parameters.runId }}
#                                preferTriggeringPipeline: ${{ parameters.preferTriggeringPipeline }}
#                                downloadPath: ${{ parameters.downloadPath }}
#                                layerType: ${{ layer.type }}

#                        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
#                          displayName: "Replace tokens in **/*.tfvars, **/*.tf"
#                          inputs:
#                            rootDirectory: "$(System.DefaultWorkingDirectory)/kits/jumpstart-all"
#                            targetFiles: "**/*.tfvars, **/*.tf"
#                            tokenPrefix: "[__"
#                            tokenSuffix: "__]"

                        # Terraform apply. terraformapply.sh is packaged with the layer build process, but exists in Stratum/scripts.sh

                        - task: AzureCLI@2
                          displayName: Applying ${{ layer.name }}
                          inputs:
                            azureSubscription: ${{ variables.serviceConnectionApp }}
                            addSpnToEnvironment: true
                            scriptType: bash
                            scriptLocation: scriptPath
                            scriptPath: "$(System.DefaultWorkingDirectory)/layer-${{ layer.type }}/${{ layer.provider }}apply.sh"
                            arguments: ${{ layer.name }} ${{ parameters.environment }} $(backendResourceGroupName) $(backendStorageAccountName) $(backendContainerName) $(Build.Repository.Name) $(basedOnStratumKitName) ${{ layer.type }} ${{ layer.destroy }} $(kitPath) ${{ layer.provider }} ${{ layer.inputFile }}
